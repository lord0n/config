blueprint:
  name: State Based Entity Control
  description: Change the target entity to desired entity state base on the trigger
    entity's state, illuminance sensor's state, Sun elevation and so on.
  domain: automation
  input:
    trigger_entity:
      name: Trigger Entity
      description: This entity will trigger the automation.
      selector:
        entity: {}
    trigger_entity_state:
      name: (Optional) Trigger Entity States
      description: When the trigger entity state is of this value, this automation
        will  try to change the target entity's state to desired state with target  entity's
        turn on action (defined below).  If this value is left empty, it will default
        to "on".  This value supports regular expression,  i.e. you can list multiple
        values as "state_1|state_2|state_3".
      default: 'on'
      selector:
        entity:
          domain: input_text
          multiple: false
    trigger_entity_state_off:
      name: (Optional) Trigger Entity Off States
      description: When the trigger entity state is of this value, this automation
        will  try to change the target entity's state to desired state with target  entity's
        turn off action (defined below).  If this value is left empty, then any states
        that is not "Trigger Entity States" defined above will trigger the turn off
        action.  This value supports regular expression,  i.e. you can list multiple
        values as "state_1|state_2|state_3".
      default:
      selector:
        entity:
          domain: input_text
          multiple: false
    target_entity:
      name: Target Entity
      description: Any entity that can be operated with below target entity turn on/off
        action.
      selector:
        entity: {}
    target_entity_state:
      name: (Optional) Target Entity Desired State
      description: When the target entity state is of this value,  the target entity
        is considered turned on.  When this value is set to 'none', the automation  will
        be triggered only based on trigger entity's state, which means target entity
        won't be turned off if it's manually turned on. This value supports regular
        expression,  i.e. you can list multiple values as "state_1|state_2|state_3".
      default: 'on'
      selector:
        entity:
          domain: input_text
          multiple: false
    target_entity_action_on:
      name: (Optional) Target Entity Turn On Action
      description: Action that will change target entity's state to desired state.
        If this value is left empty, it will default to "homeassistant.turn_on".
      default: homeassistant.turn_on
      selector:
        entity:
          domain: input_text
          multiple: false
    target_entity_action_off:
      name: (Optional) Target Entity Turn Off Action
      description: Action that will change target entity's state away from desired
        state.  It doesn't necessary have to set the entity's state to 'off',  as
        long as it's not the desired state it will be fine. If this value is left
        empty, it will default to "homeassistant.turn_off".
      default: homeassistant.turn_off
      selector:
        entity:
          domain: input_text
          multiple: false
    target_entity_off:
      name: (Optional) Turn Off Target Entity
      description: If set, instead of the original "Target Entity", this entity will
        be  turned off with the "Turn off action" defined below. This is usually helpful
        when the "Target Entity" is a scene. Then here you want to put another scene
        to revert the applied scene.
      default:
      selector:
        entity: {}
    blocker_entity:
      name: (OPTIONAL) Blocking Entity
      description: If this entity's state is set to blocking entity state (defined
        below),  it will prevent the automation from "turning on" the target entity  using
        action defined above.
      default:
      selector:
        entity: {}
    blocker_entity_state:
      name: (OPTIONAL) Blocking Entity State
      description: If blocking entity's state is of this state,  it will prevent the
        automation from  "turning on" the target entity using  action defined above.
        This value supports regular expression,  i.e. you can list multiple values
        as "state_1|state_2|state_3".
      default:
      selector:
        entity:
          domain: input_text
          multiple: false
    timeout_blocker_entity:
      name: (OPTIONAL) Timeout Blocking Entity
      description: If this entity's state is set to timeout blocking entity state  (defined
        below), it will prevent the automation from "turnning off"  the target entity
        using action defined above.
      default:
      selector:
        entity: {}
    timeout_blocker_entity_state:
      name: (OPTIONAL) Timeout Blocking Entity State
      description: If timeout blocking entity's state is of this state, it will  prevent
        the automation from from "turnning off" the target  entity using action defined
        above. This value supports regular expression,  i.e. you can list multiple
        values as "state_1|state_2|state_3".
      default:
      selector:
        entity:
          domain: input_text
          multiple: false
    illuminance_sensor:
      name: (Optional) Illuminance Sensor
      description: This sensor will be used to determine the illumination.
      default:
      selector:
        entity:
          domain: sensor
          device_class: illuminance
          multiple: false
    illuminance_below:
      name: (Optional) Illuminance Below
      description: Target entity will be "turned on" when "trigger entity" is at  expected
        state and the illumination sensor returned a value that  is below this value.
        If left empty, illuminace sensor will not be applied.
      default:
      selector:
        entity:
          domain: input_number
          multiple: false
    sun_elevation_below:
      name: (Optional) Sun Elevation Below
      description: Target entity will be turned on when "trigger entity" is at expected  state
        and Sun elevation is below this value. Sun elevation ranges  from -90 to 90
        degree. Only applied when this value is set. If left empty, this option will
        not be applied.
      default:
      selector:
        entity:
          domain: input_number
          multiple: false
    trigger_timeout:
      name: (Optional) Trigger Timeout.
      description: After "trigger entity" is no longer at "trigger entity state" for  this
        time (in seconds), "turn off" the target entity. You can also put the time
        as "HH:MM:SS". i.e. "01:02:03" means  one hour two mintues three seconds.
        If left empty, by default this will be 30 seconds.
      default: '30'
      selector:
        entity:
          domain: input_text
          multiple: false
    alt_trigger_timeouts:
      name: (OPTIONAL) Alternate Trigger Timeout
      description: Alternate trigger timeout values to use besides the main trigger  timeout.
        Follow format  "alternate_time_start_1-alternate_time_end_1,timeout_1; alternate_time_start_2-alternate_time_end_2,timeout_2;more
        times" Use "HH:MM:SS" for "alternate_time_start" and "alternate_time_end".
        Time ranges must not overlap. Timeout can either be a number (meaning timeout
        in seconds), or "HH:MM:SS" value. e.g. "17:00:00-19:30:00,30;19:30:00-20:00:00,00:20:00;23:00:00-1:00:00,60"
        means from 17:00:00 to 19:30:00, use 30 seconds as timeout; from 19:30:00
        to 20:00:00, use 20 minutes as timeout;  from 23:00:00 to 1:00:00, use 60
        seconds as timeout.
      default:
      selector:
        entity:
          domain: input_text
          multiple: false
    execution_time_ranges:
      name: (OPTIONAL) Execution Time Ranges
      description: Time ranges when this automation will be executed. If specified,
        this automation will only execute when current time is within any given time
        range. Follow format  "time_start_1-time_end_1;time_start_2-time_end_2;more
        times.." Use "HH:MM:SS" for "time_start" and "time_end". Time ranges must
        not overlap. e.g. "17:00:00-19:00:00;19:30:00-20:00:00" means this automation
        will be enabled from 17:00:00 to 19:00:00 and from 19:30:00 to 20:00:00 everyday.
      default:
      selector:
        entity:
          domain: input_text
          multiple: false
  source_url: https://github.com/kevinxw/homeassistant/blob/main/blueprints/state_based_entity_control.yaml
mode: restart
variables:
  _target_entity: !input 'target_entity'
  target_entity: '{{ _target_entity or '''' }}'
  _target_entity_off: !input 'target_entity_off'
  target_entity_off: '{{ _target_entity_off | default(target_entity, true) | trim
    }}'
  _target_entity_state: !input 'target_entity_state'
  target_entity_state: "{% set st = _target_entity_state or '' | trim %} {% if st\
    \ != 'none' and not target_entity | regex_match('^(scene|script)\\..+', ignorecase=true)\
    \ %}\n  {{ st }}\n{% endif %}"
  _target_entity_action_on: !input 'target_entity_action_on'
  target_entity_action_on: '{{ _target_entity_action_on | default(''homeassistant.turn_on'',
    true) | trim }}'
  _target_entity_action_off: !input 'target_entity_action_off'
  target_entity_action_off: '{{ _target_entity_action_off | default(''homeassistant.turn_off'',
    true) | trim }}'
  _trigger_entity: !input 'trigger_entity'
  trigger_entity: '{{ _trigger_entity or '''' }}'
  _trigger_entity_state: !input 'trigger_entity_state'
  trigger_entity_state: '{{ _trigger_entity_state | default(''on'', true) | trim }}'
  _trigger_entity_state_off: !input 'trigger_entity_state_off'
  trigger_entity_state_off: '{{ _trigger_entity_state_off | default('''', true) |
    trim }}'
  _trigger_timeout: !input 'trigger_timeout'
  illuminance_sensor: !input 'illuminance_sensor'
  illuminance_below: !input 'illuminance_below'
  blocker_entity: !input 'blocker_entity'
  _blocker_entity_state: !input 'blocker_entity_state'
  blocker_entity_state: '{{ (_blocker_entity_state or '''') | trim }}'
  timeout_blocker_entity: !input 'timeout_blocker_entity'
  _timeout_blocker_entity_state: !input 'timeout_blocker_entity_state'
  timeout_blocker_entity_state: '{{ (_timeout_blocker_entity_state or '''') | trim
    }}'
  _alt_trigger_timeouts: !input 'alt_trigger_timeouts'
  _alt_trigger_timeout: "{% set _alt_trigger_timeouts = _alt_trigger_timeouts | replace('\
    \ ', '') %} {% set current_time = now().strftime(\"%H:%M:%S\") %} {% for alt in\
    \ (_alt_trigger_timeouts or '').split(';') if alt %}\n  {% set val = alt.split(',')\
    \ %}\n  {% if val | length == 2 and val[0] %}\n    {% set t = val[0].split('-')\
    \ %}\n    {% if t | length == 2 %}\n      {% if t[0] == t[1] or\n            (t[0]\
    \ < t[1] and t[0] <= current_time and current_time <= t[1]) or\n            (t[0]\
    \ > t[1] and (current_time >= t[0] or current_time <= t[1]))\n      %}\n     \
    \   {{ val[1] | default(0, true) }}\n      {% endif %}\n    {% endif %}\n  {%\
    \ endif %}\n{% endfor %}"
  trigger_timeout: "{% set _alt_trigger_timeout = _alt_trigger_timeout | replace('\
    \ ', '') %} {% set _trigger_timeout = _trigger_timeout | replace(' ', '') %} {%\
    \ if _alt_trigger_timeout or _alt_trigger_timeout == 0 %}\n  {{ _alt_trigger_timeout\
    \ }}\n{% elif _trigger_timeout or _trigger_timeout == 0 %}\n  {{ _trigger_timeout\
    \ }}\n{% else %}\n  {{ 30 }}\n{% endif %}"
  _execution_time_ranges: !input 'execution_time_ranges'
  execution_time_ranges: '{{ (_execution_time_ranges or '''') | replace('' '', '''')
    }}'
  execution_time_range_matched: "{% set current_time = now().strftime(\"%H:%M:%S\"\
    ) %} {% for val in (execution_time_ranges or '').split(';') if val -%}\n  {% set\
    \ t = val.split('-') %}\n  {% if t | length == 2 -%}\n    {% if t[0] == t[1] or\n\
    \          (t[0] < t[1] and t[0] <= current_time and current_time <= t[1]) or\n\
    \          (t[0] > t[1] and (current_time >= t[0] or current_time <= t[1]))\n\
    \    -%}\n      {{ val }}\n    {%- endif %}\n  {%- endif %}\n{%- endfor %}"
  trigger_entities_available: "{% for e in trigger_entity.split(',') if e -%}\n  {%\
    \ if states(e) != 'unknown' and not is_state(e, 'unavailable') -%}\n    {{ e }}:{{\
    \ states(e) }};\n  {%- endif %}\n{%- endfor %}"
  trigger_entities_matched: "{% if trigger_entity_state %}\n  {% for e in trigger_entity.split(',')\
    \ if e -%}\n    {% if (states(e) or '') | regex_match('^('+ trigger_entity_state\
    \ +')$', ignorecase=true) -%}\n      {{ e }}:{{ states(e) }};\n    {%- endif %}\n\
    \  {%- endfor %}\n{% endif %}"
  trigger_entities_off_matched: "{% if trigger_entity_state_off %}\n  {% for e in\
    \ trigger_entity.split(',') if e -%}\n    {% if (states(e) or '') | regex_match('^('+\
    \ trigger_entity_state_off +')$', ignorecase=true) -%}\n      {{ e }}:{{ states(e)\
    \ }};\n    {%- endif %}\n  {%- endfor %}\n{% endif %}"
  target_entities_matched: "{% if target_entity_state %}\n  {% for e in target_entity.split(',')\
    \ if e -%}\n    {% if (states(e) or '') | regex_match('^('+ target_entity_state\
    \ +')$', ignorecase=true) -%}\n      {{ e }}:{{ states(e) }};\n    {%- endif %}\n\
    \  {%- endfor %}\n{% endif %}"
  triggered_entity: "{% if trigger and trigger.platform == 'state' %}\n  {% for e\
    \ in trigger_entity.split(',') if e -%}\n    {% if e == trigger.entity_id -%}\n\
    \      {{ e }}\n    {%- endif %}\n  {%- endfor %}\n{% endif %}"
  sun_elevation_below: !input 'sun_elevation_below'
trigger:
- platform: event
  event_type: automation_reloaded
- platform: homeassistant
  event: start
- platform: state
  entity_id: !input 'trigger_entity'
- platform: state
  entity_id: !input 'target_entity'
  for:
    seconds: 3
condition:
- condition: template
  value_template: '{{ trigger_entities_available != '''' }}'
action:
- choose:
  - conditions:
    - condition: template
      value_template: '{{ execution_time_ranges != '''' and execution_time_range_matched
        == '''' }}'
    sequence:
    - service: system_log.write
      data:
        message: Skip executing service on {{ state_attr(target_entity, 'friendly_name')
          }} since it's outside of execution time range.
        level: info
  - conditions:
    - condition: template
      value_template: '{{ not trigger or triggered_entity != '''' }}'
    - condition: template
      value_template: '{{ (sun_elevation_below | int(-9999) == -9999 and not illuminance_sensor)
        or (illuminance_sensor and states(illuminance_sensor) | int | default(99999,
        true) <= illuminance_below | int(-1)) or ((sun_elevation_below or sun_elevation_below
        == 0) and state_attr(''sun.sun'', ''elevation'') | int(91) <= sun_elevation_below
        | int(-91)) }}'
    - condition: template
      value_template: '{{ target_entity_state == '''' or target_entities_matched ==
        '''' }}'
    - condition: template
      value_template: '{{ trigger_entities_matched != '''' }}'
    - condition: template
      value_template: '{{ not blocker_entity or not states(blocker_entity) | regex_match(''^(''+
        blocker_entity_state +'')$'', ignorecase=true) }}'
    sequence:
    - service: logbook.log
      data_template:
        name: '{{ state_attr(target_entity, ''friendly_name'') or target_entity }}'
        message: is executing service {{ target_entity_action_on }}
    - service_template: '{{ target_entity_action_on }}'
      data_template:
        entity_id: '{{ target_entity }}'
  - conditions:
    - condition: template
      value_template: '{{ target_entity_state == '''' or target_entities_matched !=
        '''' }}'
    - condition: template
      value_template: '{{ (trigger_entity_state_off != '''' and trigger_entities_off_matched
        != '''') or (trigger_entity_state_off == '''' and trigger_entities_matched
        == '''') }}'
    - condition: template
      value_template: '{{ not timeout_blocker_entity or not states(timeout_blocker_entity)
        | regex_match(''^(''+ timeout_blocker_entity_state +'')$'', ignorecase=true)
        }}'
    sequence:
    - service: logbook.log
      data_template:
        name: '{{ state_attr(target_entity_off, ''friendly_name'') or target_entity_off
          }}'
        message: "will execute service {{ target_entity_action_off }} after {{ trigger_timeout\
          \ }} {% set num_timeout = trigger_timeout | int(-1) %} {% if num_timeout\
          \ > 1 %}\n  seconds.\n{% elif num_timeout >= 0 %}\n  second.\n{% else %}\n\
          \  .\n{% endif %}"
        entity_id: '{{ target_entity_off }}'
    - delay: '{{ trigger_timeout }}'
    - service: logbook.log
      data_template:
        name: '{{ state_attr(target_entity_off, ''friendly_name'') or target_entity_off
          }}'
        message: is executing service {{ target_entity_action_off }}
        entity_id: '{{ target_entity_off }}'
    - service_template: '{{ target_entity_action_off }}'
      data_template:
        entity_id: '{{ target_entity_off }}'
